# THIS FILE IS GENERATED WITH 'make generate' - DO NOT EDIT MANUALLY
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: core-capi-policy
spec:
  background: false
  rules:
  - name: cluster-label
    match:
      resources:
        kinds:
        - cluster.x-k8s.io/v1alpha3/Cluster
        - cluster.x-k8s.io/v1alpha4/Cluster
    context:
    - name: release
      apiCall:
        urlPath: "/apis/release.giantswarm.io/v1alpha1/releases"
        jmesPath: "items[?metadata.name == 'v{{ `{{` }} request.object.metadata.labels.\"release.giantswarm.io/version\" {{ `}}` }}'] | [0]"
    preconditions:
      any:
      - key: "{{ `{{` }} request.object.metadata.labels.\"release.giantswarm.io/version\" {{ `}}` }}"
        operator: Equals
        value: "20.0.0"
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            +(cluster.x-k8s.io/watch-filter): "capi"
            cluster.x-k8s.io/watch-filter: "capi"
            +(cluster-apps-operator.giantswarm.io/version): "{{ `{{` }} release.spec.components | [?name == 'cluster-apps-operator'].version | [0]{{ `}}` }}"
            cluster-apps-operator.giantswarm.io/version: "{{ `{{` }} release.spec.components | [?name == 'cluster-apps-operator'].version | [0]{{ `}}` }}"

  # cluster-default adds default values to fields in a Cluster CR if it has the watch-filter label and the values are completely missing.
  - name: cluster-default
    match:
      resources:
        kinds:
        - cluster.x-k8s.io/v1alpha3/Cluster
        - cluster.x-k8s.io/v1alpha4/Cluster
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            # Create values if missing
            +(cluster.giantswarm.io/description): {{ .Values.clusterDescription }}

  # cluster-default-empty-string adds default values to fields in a Cluster CR if it has the watch-filter label and the values are empty strings.
  - name: cluster-default-empty-string
    match:
      resources:
        kinds:
        - cluster.x-k8s.io/v1alpha3/Cluster
        - cluster.x-k8s.io/v1alpha4/Cluster
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            # Replace empty strings
            cluster.giantswarm.io/description: |-
              {{ `{{` }} regex_replace_all('^$', '{{ `{{` }}@{{ `}}` }}', '{{ .Values.clusterDescription }}') {{ `}}` }}

  - name: core-label
    match:
      resources:
        kinds:
        - addons.cluster.x-k8s.io/v1alpha3/ClusterResourceSet
        - addons.cluster.x-k8s.io/v1alpha4/ClusterResourceSet
        - addons.cluster.x-k8s.io/v1alpha3/ClusterResourceSetBinding
        - addons.cluster.x-k8s.io/v1alpha4/ClusterResourceSetBinding
        - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfig
        - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfig
        - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfigTemplate
        - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfigTemplate
        - controlplane.cluster.x-k8s.io/v1alpha3/KubeadmControlPlane
        - controlplane.cluster.x-k8s.io/v1alpha4/KubeadmControlPlane
        - cluster.x-k8s.io/v1alpha3/Machine
        - cluster.x-k8s.io/v1alpha4/Machine
        - cluster.x-k8s.io/v1alpha3/MachineSet
        - cluster.x-k8s.io/v1alpha4/MachineSet
        - cluster.x-k8s.io/v1alpha3/MachineDeployment
        - cluster.x-k8s.io/v1alpha4/MachineDeployment
        - exp.cluster.x-k8s.io/v1alpha3/MachinePool
        - exp.cluster.x-k8s.io/v1alpha4/MachinePool
    exclude:
      resources:
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    context:
    - name: releaseVersion
      apiCall:
        urlPath: "/apis/cluster.x-k8s.io/v1alpha3/namespaces/{{ `{{` }} request.object.metadata.namespace {{ `}}` }}/clusters"
        jmesPath: "items[?metadata.name == '{{ `{{` }}request.object.metadata.labels.\"cluster.x-k8s.io/cluster-name\"{{ `}}` }}'].metadata.labels.\"release.giantswarm.io/version\" | [0]"
    preconditions:
      any:
      - key: "{{ `{{` }} releaseVersion {{ `}}` }}"
        operator: Equals
        value: "20.0.0"
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            +(cluster.x-k8s.io/watch-filter): "capi"
            cluster.x-k8s.io/watch-filter: "capi"

  - name: kubeadmconfigtemplate-worker-defaults
    match:
      resources:
        kinds:
        - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfigTemplate
        - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfigTemplate
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    context:
    - name: dictionary
      configMap:
        name: kyverno-policies-data
        namespace: default
    preconditions:
      any:
      - key: "cluster.x-k8s.io/control-plane"
        operator: NotIn
        value: "{{ `{{` }} request.object.metadata.labels | keys(@) {{ `}}` }}"
    mutate:
      patchStrategicMerge:
        spec:
          template:
            spec:
              joinConfiguration:
                nodeRegistration:
                  kubeletExtraArgs:
                    healthz-bind-address: 0.0.0.0
                    node-labels: role=worker
                    node-ip: '{{ `{{` }} dictionary.data.nodeip {{ `}}` }}'

  - name: kubeadmconfig-worker-defaults
    match:
      resources:
        kinds:
        - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfig
        - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfig
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    context:
    - name: dictionary
      configMap:
        name: kyverno-policies-data
        namespace: default
    preconditions:
      any:
      - key: "cluster.x-k8s.io/control-plane"
        operator: NotIn
        value: "{{ `{{` }} request.object.metadata.labels | keys(@) {{ `}}` }}"
    mutate:
      patchStrategicMerge:
        spec:
          joinConfiguration:
            nodeRegistration:
              kubeletExtraArgs:
                healthz-bind-address: 0.0.0.0
                node-ip: '{{ `{{` }} dictionary.data.nodeip {{ `}}` }}'

  - name: kubeadmconfig-worker-merge-labels
    match:
      resources:
        kinds:
          - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfig
          - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfig
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    preconditions:
      all:
        - key: "cluster.x-k8s.io/control-plane"
          operator: NotIn
          value: "{{ `{{` }} request.object.metadata.labels | keys(@) {{ `}}` }}"
        - key: "node-labels"
          operator: In
          value: "{{ `{{` }} request.object.spec.joinConfiguration.nodeRegistration.kubeletExtraArgs | keys(@) {{ `}}` }}"
        - key: "{{ `{{` }} request.object.spec.joinConfiguration.nodeRegistration.kubeletExtraArgs.\"node-labels\" {{ `}}` }}"
          operator: NotEquals
          value: "*role=*"
    mutate:
      patchStrategicMerge:
        spec:
          joinConfiguration:
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "{{ `{{` }} join(',', ['role=worker', request.object.spec.joinConfiguration.nodeRegistration.kubeletExtraArgs.\"node-labels\"]) {{ `}}` }}"

  - name: kubeadmconfig-worker-default-labels
    match:
      resources:
        kinds:
          - bootstrap.cluster.x-k8s.io/v1alpha3/KubeadmConfig
          - bootstrap.cluster.x-k8s.io/v1alpha4/KubeadmConfig
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    preconditions:
      all:
        - key: "cluster.x-k8s.io/control-plane"
          operator: NotIn
          value: "{{ `{{` }} request.object.metadata.labels | keys(@) {{ `}}` }}"
    mutate:
      patchStrategicMerge:
        spec:
          joinConfiguration:
            nodeRegistration:
              kubeletExtraArgs:
                +(node-labels): role=worker
                +(v): "2"
                +(image-pull-progress-deadline): "{{ .Values.Installation.V1.Guest.Kubernetes.Kubelet.ImagePullProgressDeadline }}"

  - name: kubeadmcontrolplane-defaults
    match:
      resources:
        kinds:
        - controlplane.cluster.x-k8s.io/v1alpha3/KubeadmControlPlane
        - controlplane.cluster.x-k8s.io/v1alpha4/KubeadmControlPlane
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    context:
    - name: dictionary
      configMap:
        name: kyverno-policies-data
        namespace: default
    mutate:
      patchStrategicMerge:
        spec:
          kubeadmConfigSpec:
            clusterConfiguration:
              controllerManager:
                extraArgs:
                  bind-address: 0.0.0.0
              scheduler:
                extraArgs:
                  bind-address: 0.0.0.0
              apiServer:
                extraArgs:
                  audit-log-maxage: "30"
                  audit-log-maxbackup: "30"
                  audit-log-maxsize: "100"
                  audit-log-path: "/var/log/apiserver/audit.log"
                  audit-policy-file: "/etc/kubernetes/policies/audit-policy.yaml"
                  # encryption-provider-config: "/etc/kubernetes/encryption/k8s-encryption-config.yaml"
                  service-account-lookup: "true"
                  enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,DefaultStorageClass,PersistentVolumeClaimResize,PodSecurityPolicy,Priority,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook"
                  kubelet-preferred-address-types: "InternalIP"
                  +(profiling): "false"
                  +(tls-cipher-suites): "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
                  +(runtime-config): "api/all=true,scheduling.k8s.io/v1alpha1=true"
                  +(feature-gates): "TTLAfterFinished=true"
            initConfiguration:
              nodeRegistration:
                kubeletExtraArgs:
                  healthz-bind-address: 0.0.0.0
                  node-ip: "{{ `{{` }} dictionary.data.nodeip {{ `}}` }}"
                  +(v): "2"
                  +(image-pull-progress-deadline): "{{ .Values.Installation.V1.Guest.Kubernetes.Kubelet.ImagePullProgressDeadline }}"

  - name: kubeadmcontrolplane-merge-runtimeconfig-apiall-flags
    match:
      resources:
        kinds:
        - controlplane.cluster.x-k8s.io/v1alpha3/KubeadmControlPlane
        - controlplane.cluster.x-k8s.io/v1alpha4/KubeadmControlPlane
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    preconditions:
      any:
      - key: "{{ `{{` }}request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"runtime-config\"{{ `}}` }}"
        operator: NotEquals
        value: "*api/all=*"
    mutate:
      patchStrategicMerge:
        spec:
          kubeadmConfigSpec:
            clusterConfiguration:
              apiServer:
                extraArgs:
                  runtime-config: "{{ `{{` }} join(',', ['api/all=true', request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"runtime-config\"]) {{ `}}` }}"

  - name: kubeadmcontrolplane-merge-runtimeconfig-scheduling-flags
    match:
      resources:
        kinds:
        - controlplane.cluster.x-k8s.io/v1alpha3/KubeadmControlPlane
        - controlplane.cluster.x-k8s.io/v1alpha4/KubeadmControlPlane
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    preconditions:
      any:
      - key: "{{ `{{` }}request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"runtime-config\"{{ `}}` }}"
        operator: NotEquals
        value: "*scheduling.k8s.io/v1alpha1=*"
    mutate:
      patchStrategicMerge:
        spec:
          kubeadmConfigSpec:
            clusterConfiguration:
              apiServer:
                extraArgs:
                  runtime-config: "{{ `{{` }} join(',', ['scheduling.k8s.io/v1alpha1=true', request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"runtime-config\"]) {{ `}}` }}"


  - name: kubeadmcontrolplane-merge-featuregates-flags
    match:
      resources:
        kinds:
        - controlplane.cluster.x-k8s.io/v1alpha3/KubeadmControlPlane
        - controlplane.cluster.x-k8s.io/v1alpha4/KubeadmControlPlane
        selector:
          matchLabels:
            cluster.x-k8s.io/watch-filter: capi
    preconditions:
      any:
      - key: "{{ `{{` }}request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"feature-gates\"{{ `}}` }}"
        operator: NotEquals
        value: "*TTLAfterFinished=*"
    mutate:
      patchStrategicMerge:
        spec:
          kubeadmConfigSpec:
            clusterConfiguration:
              apiServer:
                extraArgs:
                  feature-gates: "{{ `{{` }} join(',', ['TTLAfterFinished=true', request.object.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.\"feature-gates\"]) {{ `}}` }}"
