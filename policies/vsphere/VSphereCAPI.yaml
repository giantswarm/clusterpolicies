apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: vsphere-capi-policy
spec:
  background: false
  rules:
  - name: vsphere-label
    match:
      resources:
        kinds:
        - infrastructure.cluster.x-k8s.io/v1alpha4/VSphereCluster
        - infrastructure.cluster.x-k8s.io/v1alpha4/VSphereMachine
        - infrastructure.cluster.x-k8s.io/v1alpha4/VSphereMachineTemplate
        - infrastructure.cluster.x-k8s.io/v1alpha4/VSphereVM
    context:
    - name: releaseVersion
      apiCall:
        urlPath: "/apis/cluster.x-k8s.io/v1alpha3/namespaces/{{ request.object.metadata.namespace }}/clusters"
        jmesPath: "items[?metadata.name == '{{request.object.metadata.labels.\"cluster.x-k8s.io/cluster-name\"}}'].metadata.labels.\"release.giantswarm.io/version\" | [0]"
    preconditions:
      any:
      - key: "{{ releaseVersion }}"
        operator: Equals
        value: "20.0.0"
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            +(cluster.x-k8s.io/watch-filter): "capi"
            cluster.x-k8s.io/watch-filter: "capi"
  - name: default-endpoint
    match:
      resources:
        kinds:
        - infrastructure.cluster.x-k8s.io/v1alpha4/VSphereCluster
        - cluster.x-k8s.io/v1alpha4/Cluster
    context:
    # Collect all endpoints from existing vsphere clusters.
    - name: usedEndpoints
      apiCall:
        urlPath: "/apis/infrastructure.cluster.x-k8s.io/v1alpha4/namespaces/{{ request.object.metadata.namespace }}/VSphereCluster"
        jmesPath: "items[*].spec.controlPlaneEndpoint.host"
    mutate:
      patchStrategicMerge:
        spec:
          +(controlPlaneEndpoint):
            # Get configured IPs | filter out already used ones | select the first non used one.
            +(host): "{{ [[.Values.vsphereIPs]] | [? !contains( `{{usedEndpoints}}`, @)] | [0]}}"
            +(port): 6443
